from aiogram import F, types, Router
from aiogram.filters import CommandStart

from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy.ext.asyncio import AsyncSession

from bot.auth.auth_function import get_auth_data
from bot.auth.user_verification import check_admin_credentials, check_user_credentials, get_variable_admin
from bot.database.orm_query import get_group_by_id, orm_add_chatid_for_user, orm_get_admin, orm_get_user
from bot.google.google_function import create_drive_service, get_drive_config, get_files_from_folder
from bot.keyboards.reply import get_keyboard
from bot.logging.logger import bot_logger

user_router = Router()
SERVICE_ACCOUNT_FILE, SCOPES = get_drive_config()
service = create_drive_service(SERVICE_ACCOUNT_FILE, SCOPES)


class Form(StatesGroup):
    auth = State()
    search = State()
    check = State()
    get = State()

@user_router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext)-> None:
    try:
        start_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, —è <b>FileScout</b>! üåü –Ø ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ Google –î–∏—Å–∫–∞. üìÇ\n\n"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏! üìÅ\n\n"
            "–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã, –ø–æ—ç—Ç–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. üîë\n\n"
            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í–æ–π—Ç–∏</b>, —á—Ç–æ–±—ã —è –º–æ–≥ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –≤—ã.\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –Ω–∞–π—Ç–∏ –≤–∞—Å.\n"
            "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n"
            "4Ô∏è‚É£ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –≤–æ–π–¥–µ—Ç–µ, —Å–º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –Ω–µ–π! üìÇ\n\n"
            "–Ø –æ–±–µ—Å–ø–µ—á—É –≤–∞—à—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∏ —Ç–æ–ª—å–∫–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º! üîí\n\n"
            "–ì–æ—Ç–æ–≤—ã? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í–æ–π—Ç–∏</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá"
        )
        get_phone_keyboard = get_keyboard(
            "",
            "üîë –í–æ–π—Ç–∏",
            placeholder="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            request_contact=1,
            sizes=(1,)
        )
        
        await state.set_state(Form.auth)
        await message.answer(start_message, reply_markup=get_phone_keyboard)
        bot_logger.log('info', '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

    except Exception as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –≤ start_cmd: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message((F.text == "üîë –í–æ–π—Ç–∏") | (F.contact), Form.auth)

async def handle_auth(message: types.Message, state: FSMContext)-> None:
    try:            
        if message.text == "üîë –í–æ–π—Ç–∏":
            phone, password = await get_auth_data(state)
            auth_message =(
            "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. üõ†Ô∏è\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –ø–∞—Ä–æ–ª—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–≤–æ–∏–º —Ñ–∞–π–ª–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º. "
            "–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ! üöÄ"
            )            
            await message.answer(auth_message, reply_markup=ReplyKeyboardRemove())
            await state.update_data({'awaiting_password': True,'phone_number': phone, 'password': password })
            await state.set_state(Form.auth)

            bot_logger.log('info', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"')

        elif message.contact:
            contact = message.contact
            phone_number = contact.phone_number
            login_message = (
            f"üì± –í–∞—à –ª–æ–≥–∏–Ω: <b>+{phone_number}</b>. \n\n"
            "–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å. üîë\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n "
            "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–≤–æ–∏–º —Ñ–∞–π–ª–∞–º! üìÇ"
            )
            await message.answer(login_message, reply_markup=ReplyKeyboardRemove())
            await state.update_data({'awaiting_password': True,'phone_number': phone_number })
            await state.set_state(Form.auth)
            bot_logger.log('info', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç: {phone_number}')

    except Exception as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –≤ handle_auth: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@user_router.message(F.text == "‚ùå –í—ã–π—Ç–∏") #–ë–∞–Ω–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
async def exit_handler(message: types.Message, state: FSMContext)-> None:
    try:
        await state.set_state(Form.auth)
        logout_message = (
        "üö™ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞—à–µ –≤—Ä–µ–º—è –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω—ã–º!\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, "
        "–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üîë –í–æ–π—Ç–∏.</b>\n\n"
        )
        await message.answer(logout_message, reply_markup=get_keyboard("üîë –í–æ–π—Ç–∏", placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"))
        await state.update_data({'admin': False})
        bot_logger.log('info', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.')
    except Exception as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –≤ exit_handler: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@user_router.message(F.text, Form.auth)
async def auth(message: types.Message, state: FSMContext, session: AsyncSession)-> None:
    try:
        user_data = await state.get_data()
        phone_number, password = await get_auth_data(state)

        if not user_data.get('awaiting_password'):
            await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–í–æ–π—Ç–∏</b>.")
            return

        password = message.text.strip()
        await state.update_data({"password": password})

        admin = await orm_get_admin(session, phone_number)
        if admin and await check_admin_credentials(admin, password, message):
            await state.set_state(Form.search) 
            await state.update_data({'admin': True, 'awaiting_password': False})

            return
        user = await orm_get_user(session, phone_number)

        if user and await check_user_credentials(user, password, message):
            await state.set_state(Form.search)
            await state.update_data({'awaiting_password': False}) 
            chat_id = message.chat.id
            await orm_add_chatid_for_user(session, chat_id, phone_number)
            return
        
        await message.answer("üö´ –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –≤ auth: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@user_router.message((F.text == "–ü–æ–∏—Å–∫"))

async def search_catalog(message: types.Message, state: FSMContext)-> None:
    try:
        is_admin = await get_variable_admin(state)

        search_message = (
            "üîé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. "
            "üóÇÔ∏è –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
            "‚ú®"
        )     
        if is_admin:
            admin_keyboard = get_keyboard("‚ùå –í—ã–π—Ç–∏", "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            await message.answer(search_message, reply_markup=admin_keyboard)
        else:
            user_keyboard = get_keyboard("‚ùå –í—ã–π—Ç–∏", placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            await message.answer(search_message, reply_markup=user_keyboard)

        await state.set_state(Form.get)
        bot_logger.log('info', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫.')

    except Exception as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –≤ search_catalog: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.message(F.text != "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", Form.get)
async def get_files(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    folder_name = message.text.strip()
    
    try:
        user_data = await state.get_data()
        phone_number = user_data.get('phone_number')
        user = await orm_get_user(session, phone_number)
        
        group_name = await get_group_by_id(session, user.group_id)
        
        is_admin = await get_variable_admin(state)

        response_text, error = await get_files_from_folder(service, folder_name, None if is_admin else group_name)

        if error:
            bot_logger.log('error', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {error}')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {response_text}")
        else:
            if is_admin:
                exit_keyboard = get_keyboard("‚ùå –í—ã–π—Ç–∏", "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            else:
                exit_keyboard = get_keyboard("‚ùå –í—ã–π—Ç–∏", placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
                
            await message.answer(response_text, reply_markup=exit_keyboard)

    except Exception as e:
        bot_logger.log('error', f'–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_files: {e}')
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")