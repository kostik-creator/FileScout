from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy.ext.asyncio import AsyncSession


from bot.auth.auth_function import generate_hashed_password
from bot.filters.isadmin import IsAdmin
from bot.keyboards.reply import get_keyboard
from bot.logging.logger import bot_logger
from bot.database.orm_query import (
    get_group_by_id,
    get_groups,
    orm_add_administrator,
    orm_add_user,
    orm_delete_admin,
    orm_delete_user,
    orm_get_admin,
    orm_get_all_admins,
    orm_get_all_users,
    orm_get_chatid_by_phone,
    orm_get_user,
    orm_get_users_by_group,
)

from bot.auth.user_verification import INITIAL_ADMIN_KB
from bot.handlers.user_handlers import Form
from bot.keyboards.inline import get_callback_btns, inline_actions_on_users
from bot.send_messages.newsletter import send_message_to_user, send_photo_to_user, send_video_to_user


class AddAdmin(StatesGroup):
    phone_input = State() 
    confirm = State()     
    none = State()

class AddUser(StatesGroup):
    phone_input = State()
    select_group = State()

class SearchUser(StatesGroup):
    waiting_for_phone = State()

class SendMessage(StatesGroup):
    waiting_for_message = State()

admin_router = Router()
admin_router.message.filter(IsAdmin())

ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
    "–ù–∞–∑–∞–¥",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2, 2, 2, 1),
)


@admin_router.message(F.text.casefold() == "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def check_command(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.set_state(AddAdmin.none)
    await message.answer("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:", reply_markup=ADMIN_KB)


@admin_router.message(F.text.casefold() == '–Ω–∞–∑–∞–¥')
async def back(message: types.Message, state: FSMContext)-> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.set_state(Form.search)
    await message.answer('üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –¥–∞–ª—å—à–µ?', reply_markup=INITIAL_ADMIN_KB)


@admin_router.message(F.text.casefold() == '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def create_user(message: types.Message, state: FSMContext)-> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.set_state(AddUser.phone_input)  
    await message.answer("üìû <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –ø–ª—é—Å–∞):</b>\n"
                         "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
    bot_logger.log('info', f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')


@admin_router.message(F.text.casefold() == '–¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
async def create_administrator(message: types.Message, state: FSMContext)-> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await state.set_state(AddAdmin.phone_input)
    await message.answer("üìû <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –ø–ª—é—Å–∞):</b>\n"
                         "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
    bot_logger.log('info', f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')


@admin_router.message(F.text.casefold() == "—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def get_all_users(message: types.Message, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥—Ä—É–ø–ø.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        users = await orm_get_all_users(session)  

        if not users:
            await message.answer("üö´ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        user_list = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

        for index, user in enumerate(users, start=1):
            group_name = user.group.name if user.group else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
            user_list += f"{index}. üìû –ù–æ–º–µ—Ä: <b>+{user.phone}</b>, –ì—Ä—É–ø–ø–∞: <b>{group_name}</b>\n"

            keyboard_actions_on_user = inline_actions_on_users(user)

            await message.answer(
                f"{index}. üìû –ù–æ–º–µ—Ä: <b>+{user.phone}</b>, –ì—Ä—É–ø–ø–∞: <b>{group_name}</b>",
                reply_markup=keyboard_actions_on_user
            )

    except Exception as e:
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@admin_router.message(F.text.casefold() == "—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def get_all_admins(message: types.Message, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥—Ä—É–ø–ø.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        admins = await orm_get_all_admins(session)  



        user_list = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"

        for index, admin in enumerate(admins, start=1):
            user_list += f"{index}. üìû –ù–æ–º–µ—Ä: <b>+{admin.phone}</b>,\n"

            list_of_admins = get_callback_btns(
                btns={
                    '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': f'delete_admin_{admin.phone}',
                },
                sizes=(2, 1)
            )

            await message.answer(
                f"{index}. üìû –ù–æ–º–µ—Ä: <b>+{admin.phone}</b>",
                reply_markup=list_of_admins
            )

    except Exception as e:
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@admin_router.message(F.text.casefold() == '–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def find_user(message: types.Message, state: FSMContext)-> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö. "
        "–ü—Ä–∏–º–µ—Ä: <b>375 33 350 78 90</b> –∏–ª–∏ <b>375333507890</b>. ü•∫üìû"
        )
    await state.set_state(SearchUser.waiting_for_phone)


@admin_router.message(F.text.casefold() == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def start_send_message_to_group(message: types.Message, session: AsyncSession) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –∞–¥–º–∏–Ω–∏–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    """
    groups = await get_groups(session)
    btns = {group.name: f'group_message_{group.id}' for group in groups}
    await message.answer("‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=get_callback_btns(btns=btns))


@admin_router.callback_query(F.data.startswith("group_message_"))
async def select_group_for_message(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    Args:
        callback (types.CallbackQuery): CallbackQuery –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    """
    group_id = int(callback.data.split('_')[2])
    await state.update_data({'selected_group_id': group_id})
    
    await callback.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:")
    await callback.message.edit_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã:")
    await state.set_state(SendMessage.waiting_for_message)


@admin_router.message(SendMessage.waiting_for_message)
async def process_group_message(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    """
    user_data = await state.get_data()
    group_id = user_data.get('selected_group_id')

    users = await orm_get_users_by_group(session, group_id)

    if not users:
        await message.answer("üö´ –í –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if message.photo:
        photo = message.photo[-1].file_id 
        for user in users:
            phone_number = f"{user.phone}" if not user.phone.startswith('+') else user.phone
            chat_id = await orm_get_chatid_by_phone(session, phone_number)
            if chat_id:
                await send_photo_to_user(message.bot, chat_id, photo, message.caption)

    elif message.video:
        video = message.video.file_id 
        for user in users:
            phone_number = f"{user.phone}" if not user.phone.startswith('+') else user.phone
            chat_id = await orm_get_chatid_by_phone(session, phone_number)
            if chat_id:
                await send_video_to_user(message.bot, chat_id, video, message.caption)

    else:
        for user in users:
            phone_number = f"{user.phone}" if not user.phone.startswith('+') else user.phone
            chat_id = await orm_get_chatid_by_phone(session, phone_number)
            if chat_id:
                await send_message_to_user(message.bot, chat_id, message.text)

    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã.")


@admin_router.message(SearchUser.waiting_for_phone)
async def process_phone_number(message: types.Message, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    """
    try:
        phone_number = message.text.strip().replace(" ", "") 

        if not phone_number.isdigit() or len(phone_number) < 10:
            await message.answer(
                "‚ùå –û–π! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. "
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö. "
                "–ü—Ä–∏–º–µ—Ä: <b>375 33 350 78 90</b> –∏–ª–∏ <b>375333507890</b>. ü•∫üìû"
            )
            return

        user = await orm_get_user(session, phone_number)
        
        if user:
            group_name = await get_group_by_id(session, user.group_id)
            keyboard_actions_on_user = inline_actions_on_users(user)
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: <b>+{user.phone}</b>, –ì—Ä—É–ø–ø–∞: <b>{group_name}</b>",
                reply_markup=keyboard_actions_on_user
            )
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except ValueError as ve:
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ve}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. "
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö. "
            "–ü—Ä–∏–º–µ—Ä: <b>375 33 350 78 90</b> –∏–ª–∏ <b>375333507890</b>. ü•∫üìû"
        )    
    except Exception as e:
        bot_logger.log('error', f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")


@admin_router.callback_query(F.data.startswith('delete_user_'))
async def delete_user(callback_query: types.CallbackQuery, session: AsyncSession) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —á–µ—Ä–µ–∑ callback_data.
    
    Args:
        callback_query (types.CallbackQuery): CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    """
    phone = callback_query.data.split('_')[-1]

    user = await orm_get_user(session, phone)

    if not user:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await orm_delete_user(session, user)
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º +{user.phone} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        await callback_query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c –Ω–æ–º–µ—Ä–æ–º +{user.phone} –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=None)

    except Exception as e:
        await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º +{user.phone}: {e}")

@admin_router.callback_query(F.data.startswith('delete_admin_'))
async def delete_admin(callback_query: types.CallbackQuery, session: AsyncSession) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —á–µ—Ä–µ–∑ callback_data.
    
    Args:
        callback_query (types.CallbackQuery): CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    """
    phone = callback_query.data.split('_')[-1]

    admin = await orm_get_admin(session, phone)

    try:
        await orm_delete_admin(session, admin)
        await callback_query.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –Ω–æ–º–µ—Ä–æ–º +{admin.phone} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        await callback_query.message.edit_text(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä c –Ω–æ–º–µ—Ä–æ–º +{admin.phone} –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=None)

    except Exception as e:
        await callback_query.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º +{admin.phone}: {e}")


@admin_router.callback_query(F.data.startswith("select_group_"))
async def confirm_user_addition(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext)-> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    try:
        group_id = int(callback.data.split('_')[2])
        user_data = await state.get_data()
        phone_number = user_data.get('add_user_phone')
        hashed_password = user_data.get('add_user_password')


        name_group = await get_group_by_id(session, group_id)

        await orm_add_user(session, phone_number, hashed_password, group_id)

        await callback.answer("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        await callback.message.edit_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º <b>+{phone_number}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É <b>{name_group}</b>!\n",
            reply_markup=None
        )

    except Exception as e:
        bot_logger.log('error',f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@admin_router.callback_query(F.data.startswith('change_group_'))
async def change_group_user(callback_query: types.CallbackQuery, session: AsyncSession) -> None:
    """–ú–µ–Ω—è–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —á–µ—Ä–µ–∑ callback_data.
    
    Args:
        callback_query (types.CallbackQuery): CallbackQuery –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    """
    data = callback_query.data.split('_')[-1] 
    id_group, phone = data.split(', ') 
    group_name = await get_group_by_id(session, int(id_group))

    group_mapping = {
        '1': ('2', 'FWS'),
        '2': ('1', 'FWD')
    }

    if id_group in group_mapping:
        new_id_group, group_name = group_mapping[id_group]

    user = await orm_get_user(session, phone)
    
    user.group_id = int(new_id_group)
    await session.commit()
    await callback_query.answer(f"–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {group_name}.")
    
    keyboard_actions_on_user = inline_actions_on_users(user)
    await callback_query.message.edit_text(f" üìû –ù–æ–º–µ—Ä: +{user.phone}, –ì—Ä—É–ø–ø–∞: {group_name}", reply_markup=keyboard_actions_on_user)


@admin_router.message(AddAdmin.phone_input)
async def input_phone(message: types.Message, state: FSMContext)-> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç message.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    try:
        phone_number = message.text.strip().replace(" ", "") 

        if not phone_number.isdigit() or len(phone_number) < 10:
            await message.answer(
            "‚ùå –û–π! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. "
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö. "
            "–ü—Ä–∏–º–µ—Ä: <b>375 33 350 78 90</b> –∏–ª–∏ <b>375333507890</b>. ü•∫üìû"
            )
            return

        password, hashed_password = generate_hashed_password()
        await state.update_data({'add_admin_phone': phone_number, 'add_admin_password': hashed_password})

        await state.set_state(AddAdmin.confirm)

        await message.answer(
            f"üîî –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º: <b>+{phone_number}</b>\n"
            f"üîë –í–æ—Ç –µ–≥–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: <b>{password}</b>\n\n"
            "‚úÖ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "–í–∞—à –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∂–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ!",
            reply_markup=get_callback_btns(btns={'–î–∞': 'add_', '–ù–µ—Ç': 'cancel_'}, sizes=(2, 1))
        )
    except Exception as e:
        bot_logger.log('error',f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@admin_router.message(AddUser.phone_input)
async def process_phone_input(message: types.Message, state: FSMContext, session: AsyncSession)-> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç message.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        phone_number = message.text.strip().replace(" ", "") 

        if not phone_number.isdigit() or len(phone_number) < 10:
            await message.answer(
            "‚ùå –û–π! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. "
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö. "
            "–ü—Ä–∏–º–µ—Ä: <b>375 33 350 78 90</b> –∏–ª–∏ <b>375333507890</b>. ü•∫üìû"
            )
            return

        password, hashed_password = generate_hashed_password()

        groups = await get_groups(session)
        btns = {group.name: f'select_group_{group.id}' for group in groups}

        await state.update_data({'add_user_phone': phone_number, 'add_user_password': hashed_password})

        await message.answer(
            f"üîî –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º: <b>+{phone_number}</b>\n"
            f"üîë –í–æ—Ç –µ–≥–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: <b>{password}</b>\n\n"
            "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</b>\n\n"
            "‚úÖ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–∞–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å:</b>\n",
            reply_markup=get_callback_btns(btns=btns)
        )
    except Exception as e:
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@admin_router.callback_query(F.data.startswith("add_"))
async def confirm_addition(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext)-> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    try:
        user_data = await state.get_data()
        phone_number = user_data.get('add_admin_phone')
        hashed_password = user_data.get('add_admin_password')

        await orm_add_administrator(session, phone_number, hashed_password)

        await callback.answer("‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        await callback.message.edit_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –Ω–æ–º–µ—Ä–æ–º <b>+{phone_number}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–æ–≥–æ-—Ç–æ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å! üòä",
            reply_markup=None,
        )
    except Exception as e:
        bot_logger.log('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@admin_router.callback_query(F.data.startswith("cancel_"))
async def cancel_addition(callback: types.CallbackQuery)-> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å!\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! üòä",
        reply_markup=None,
    )

