import os

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from bot.logging.logger import bot_logger

from dotenv import load_dotenv

load_dotenv('env')


def get_drive_config():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive API.
    
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π –¥–æ—Å—Ç—É–ø–∞.
    """
    SERVICE_ACCOUNT_FILE = os.getenv('SERVICE_ACCOUNT')
    SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
    return SERVICE_ACCOUNT_FILE, SCOPES

def create_drive_service(service_account_file, scopes):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ Google Drive —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞.

    :param service_account_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞.
    :param scopes: –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –¥–æ—Å—Ç—É–ø–∞.
    :return: –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ Google Drive.
    """
    credentials = service_account.Credentials.from_service_account_file(
        service_account_file, scopes=scopes
    )
    service = build('drive', 'v3', credentials=credentials)
    return service

async def find_folder_id(service, folder_name, suffix=None):
    """
    –ù–∞—Ö–æ–¥–∏—Ç ID –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é.

    :param service: –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ Google Drive.
    :param folder_name: –ò–º—è –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.
    :param suffix: –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'FWS' –∏–ª–∏ 'FWD').
    :return: ID –ø–∞–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query = f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
        if suffix:
            query += f" and name contains '{suffix}'"

        folder_results = service.files().list(
            q=query,
            fields="files(id, name)"
        ).execute()
        
        folders = folder_results.get('files', [])
        return folders[0]['id'] if folders else None

    except HttpError as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–ø–∫–∏: {e}')
        return None
    
async def list_files_in_folder(service, folder_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.

    :param service: –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ Google Drive.
    :param folder_id: ID –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.
    :return: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        query = f"'{folder_id}' in parents"
        results = service.files().list(
            pageSize=10,
            fields="nextPageToken, files(id, name, mimeType)",
            q=query
        ).execute()
        
        return results.get('files', [])
    
    except HttpError as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {e}')
        return []

def format_files_response(files):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö.

    :param files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤.
    """
    if files:
        response_text = "üìÇ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:\n"
        for file in files:
            file_id = file['id']
            file_name = file['name']
            download_link = f"https://drive.google.com/uc?id={file_id}"
            response_text += (
                f"üìÑ <b>{file_name}</b>: [–°–∫–∞—á–∞—Ç—å]({download_link})\n"
            )
        return response_text
    else:
        return "üö´ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üòû"
async def get_files_from_folder(service, folder_name, suffix):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –Ω–∞ Google Drive.
    
    :param service: –û–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ Google Drive.
    :param folder_name: –ò–º—è –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.
    :return: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        folder_id = await find_folder_id(service, folder_name, suffix)

        if not folder_id:
            return "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ü•∫", None

        files = await list_files_in_folder(service, folder_id)
        response_text = format_files_response(files)
        
        return response_text, None

    except Exception as e:
        bot_logger.log('error', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}')
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
