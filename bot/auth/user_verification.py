from aiogram import types
from aiogram.fsm.context import FSMContext


from bot.auth.auth_function import check_password
from bot.keyboards.reply import get_keyboard
from bot.logging.logger import bot_logger

from typing import Any

INITIAL_ADMIN_KB = get_keyboard(
    "–ü–æ–∏—Å–∫",
    "‚ùå –í—ã–π—Ç–∏",
    "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
    sizes=(2, 1)
)

USER_KB = get_keyboard(
    "–ü–æ–∏—Å–∫", 
    "‚ùå –í—ã–π—Ç–∏", 
    placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
)

async def check_admin_credentials(admin: Any, password: str, message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        admin (Any): –û–±—ä–µ–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –ë–î.
        password (str): –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        message (types.Message): –û–±—ä–µ–∫—Ç message.

    Returns:
        bool: True, –µ—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    if admin:
        stored_hashed_password = admin.password
        if check_password(password, stored_hashed_password):
            await message.answer(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üåü\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π. "
                "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n",
                reply_markup=INITIAL_ADMIN_KB
            )
            bot_logger.log('info', f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç.')
            return True
    return False

async def check_user_credentials(user: Any, password: str, message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user (Any): –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –ë–î.
        password (str): –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        message (types.Message): –û–±—ä–µ–∫—Ç message.

    Returns:
        bool: True, –µ—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    if user:
        stored_hashed_password = user.password  
        if check_password(password, stored_hashed_password):
            await message.answer(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåà\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–∏—Å–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n\n",
                reply_markup=USER_KB
            )
            bot_logger.log('info', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç.')
            
            return True
    return False

async def get_variable_admin(state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user_data = await state.get_data()
    is_admin = user_data.get('admin', False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    return is_admin